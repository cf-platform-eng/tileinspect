// Code generated by counterfeiter. DO NOT EDIT.
package checkconfigfakes

import (
	sync "sync"

	checkconfig "github.com/cf-platform-eng/tileinspect/checkconfig"
)

type FakeMetadataCmd struct {
	LoadMetadataStub        func(interface{}) error
	loadMetadataMutex       sync.RWMutex
	loadMetadataArgsForCall []struct {
		arg1 interface{}
	}
	loadMetadataReturns struct {
		result1 error
	}
	loadMetadataReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetadataCmd) LoadMetadata(arg1 interface{}) error {
	fake.loadMetadataMutex.Lock()
	ret, specificReturn := fake.loadMetadataReturnsOnCall[len(fake.loadMetadataArgsForCall)]
	fake.loadMetadataArgsForCall = append(fake.loadMetadataArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("LoadMetadata", []interface{}{arg1})
	fake.loadMetadataMutex.Unlock()
	if fake.LoadMetadataStub != nil {
		return fake.LoadMetadataStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.loadMetadataReturns
	return fakeReturns.result1
}

func (fake *FakeMetadataCmd) LoadMetadataCallCount() int {
	fake.loadMetadataMutex.RLock()
	defer fake.loadMetadataMutex.RUnlock()
	return len(fake.loadMetadataArgsForCall)
}

func (fake *FakeMetadataCmd) LoadMetadataCalls(stub func(interface{}) error) {
	fake.loadMetadataMutex.Lock()
	defer fake.loadMetadataMutex.Unlock()
	fake.LoadMetadataStub = stub
}

func (fake *FakeMetadataCmd) LoadMetadataArgsForCall(i int) interface{} {
	fake.loadMetadataMutex.RLock()
	defer fake.loadMetadataMutex.RUnlock()
	argsForCall := fake.loadMetadataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMetadataCmd) LoadMetadataReturns(result1 error) {
	fake.loadMetadataMutex.Lock()
	defer fake.loadMetadataMutex.Unlock()
	fake.LoadMetadataStub = nil
	fake.loadMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMetadataCmd) LoadMetadataReturnsOnCall(i int, result1 error) {
	fake.loadMetadataMutex.Lock()
	defer fake.loadMetadataMutex.Unlock()
	fake.LoadMetadataStub = nil
	if fake.loadMetadataReturnsOnCall == nil {
		fake.loadMetadataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.loadMetadataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMetadataCmd) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loadMetadataMutex.RLock()
	defer fake.loadMetadataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetadataCmd) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ checkconfig.MetadataCmd = new(FakeMetadataCmd)
